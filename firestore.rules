rules_version = '2';
service cloud.firestore {
  match /databases/{db}/documents {
    function isAdmin() {
      return request.auth != null 
        && request.auth.token.email in [
          "admin@esano.rw"
        ];
    }

    // User profiles
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && (request.auth.uid == userId || isAdmin());
    }

    // Family trees
    match /familyTrees/{ownerId} {
      allow read, write: if request.auth != null && (request.auth.uid == ownerId || isAdmin());

      // Realtime presence under a tree
      match /presence/{uid} {
        allow read: if request.auth != null && (request.auth.uid == ownerId || isAdmin());
        allow write: if request.auth != null && (request.auth.uid == ownerId || isAdmin());
      }
    }

    // Family tree access requests
    match /familyTreeAccessRequests/{reqId} {
      allow create: if request.auth != null
        && request.resource.data.requesterId == request.auth.uid
        && request.resource.data.ownerId is string
        && request.resource.data.status == "pending";
      allow update: if request.auth != null
        && resource.data.ownerId == request.auth.uid
        && request.resource.data.status in ["accept","deny"];
      allow read: if request.auth != null
        && (resource.data.requesterId == request.auth.uid
            || resource.data.ownerId == request.auth.uid
            || isAdmin());
    }

    // Family tree shares
    match /familyTreeShares/{shareId} {
      allow read: if request.auth != null
        && (resource.data.ownerId == request.auth.uid
            || resource.data.targetUserId == request.auth.uid
            || isAdmin());
      allow write: if request.auth != null
        && (resource.data.ownerId == request.auth.uid || isAdmin());
    }

    // Notifications
    match /notifications/{notifId} {
      allow read: if request.auth != null
        && resource.data.userId == request.auth.uid;
      allow write: if false; // Only server-side writes via Admin SDK
    }

    // Connection requests
    match /connectionRequests/{reqId} {
      allow create: if request.auth != null
        && request.resource.data.fromUserId == request.auth.uid
        && request.resource.data.toUserId is string
        && request.resource.data.status == "pending";
      allow update: if request.auth != null
        && resource.data.toUserId == request.auth.uid
        && request.resource.data.status in ["accepted","declined"];
      allow read: if request.auth != null
        && (resource.data.fromUserId == request.auth.uid
            || resource.data.toUserId == request.auth.uid
            || isAdmin());
    }

    // Messages (reads only from clients; writes via Admin SDK/server)
    match /messages/{msgId} {
      allow read: if request.auth != null
        && (resource.data.senderId == request.auth.uid
            || resource.data.receiverId == request.auth.uid);
      allow create, update, delete: if false;
    }

    // Family tree applications
    match /familyTreeApplications/{appId} {
      allow read: if isAdmin();
      allow write: if false; // Only server-side writes via Admin SDK
    }

    // Uploaded documents
    match /uploadedDocuments/{docId} {
      allow read: if isAdmin();
      allow write: if false; // Only server-side writes via Admin SDK
    }

    // Family codes
    match /familyCodes/{codeId} {
      allow read: if request.auth != null;
      allow write: if false; // Only server-side writes via Admin SDK
    }

    // Admin users
    match /adminUsers/{adminId} {
      allow read, write: if isAdmin();
    }

    // Activity logs
    match /activityLogs/{logId} {
      allow read: if isAdmin();
      allow write: if false; // Only server-side writes via Admin SDK
    }

    match /{document=**} { allow read, write: if false; }
  }
}